pipeline 
{
    environment{
    registry = "raaghavendra09/gameoflife-image"
     registryCredential = 'dockerhub'
   }
  
 //  environment{
  //      DOCKER_TAG = getDockerTag()
  //  }
    
    agent any 
    tools { 
        maven 'Maven'
    }
stages {     
 stage('Preparation') { 
     steps {
      git 'https://github.com/raaghavendra09/game-of-life.git'
     }
   }

   stage('Build') {
       steps {
       // Run the maven build

      //if (isUnix()) {
         sh 'mvn -Dmaven.test.failure.ignore=true install'
      //} 
      //else {
      //   bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package/)
       }
// }
   }
 
  stage('Unit Test Results') {
      steps {
      junit '**/target/surefire-reports/TEST-*.xml'
      
      }
 }
 stage('Sonarqube') {
    environment {
        scannerHome = tool 'sonarqube'
    }
    steps {
        withSonarQubeEnv('sonarqube') {
            sh "${scannerHome}/bin/sonar-scanner"
        }
        // timeout(time: 12, unit: 'MINUTES') {
         //   waitForQualityGate abortPipeline: true
       // }
    }
}
     stage('Artifact upload') {
      steps {
     nexusPublisher nexusInstanceId: '1234', nexusRepositoryId: 'releases', packages: [[$class: 'MavenPackage', mavenAssetList: [[classifier: '', extension: '', filePath: 'gameoflife-web/target/gameoflife.war']], mavenCoordinate: [artifactId: 'gameoflife1', groupId: 'com.wakaleo.gameoflife', packaging: 'war', version: '$BUILD_NUMBER']]]
      }
 }
     stage('Deploy War') {
       steps {
          
          deploy adapters: [tomcat8(credentialsId: 'd596b3a4-e0c4-4439-b0f4-5e1ccc007ba0', path: '', url: 'http://3.6.172.191:8080/manager/html')], contextPath: 'gameoflife-raghava', war: '**/*.war'
        
       // deploy adapters: [tomcat8(credentialsId: 'd596b3a4-e0c4-4439-b0f4-5e1ccc007ba0', path: '', url: 'http://15.206.104.102:8080/')], contextPath: 'GOL-1', war: '**/*.war'
        
      }
 }
    
 /*    stage('Deploy War') {
      steps {
        sh label: '', script: 'ansible-playbook deploy.yml'
      }
 }*/
    
    //stage('Build and Push Docker Image') {
     // steps {
      //  sh label: '', script: '''docker build -t gameoflife-image:$BUILD_NUMBER .
      //                           docker tag gameoflife-image:$BUILD_NUMBER docker.io/raaghavendra09/gameoflife-image:$BUILD_NUMBER
      //                           docker push docker.io/raaghavendra09/gameoflife-image:$BUILD_NUMBER'''
     // }
// }

stage('Build Docker Image'){
            steps{
               // sh "docker build . -t raaghavendra09/gameoflife:${DOCKER_TAG}"
               sh "docker build . -t raaghavendra09/gameoflife:$BUILD_NUMBER"
               
            }
        }
        stage('DockerHub Push'){
            steps{
         withCredentials([string(credentialsId: 'passwd', variable: 'passwd')]) {

                   sh "docker login -u raaghavendra09 -p ${passwd}"
                    sh "docker push raaghavendra09/gameoflife:${BUILD_NUMBER}"
                } 
            }
        }

   stage('Update Image Version') {
         steps {
            sh label: '', script: '''sed -i s/latest/$BUILD_NUMBER/ deploy-kube.yml'''
         }
}
   stage('Apply Kubernetes files'){
        steps {
         sh label: '', script: '''scp *.yml jenkins@15.206.114.5:/home/jenkins
                               ssh jenkins@15.206.114.5 kubectl apply -f deploy-kube.yml
                               ssh jenkins@15.206.114.5 kubectl apply -f service.yml'''
         }
   }
   
   /* stage('Deploy to Kubernetes') {
         steps {
         withKubeConfig([credentialsId: 'jenkins-kube']) {
         sh 'kubectl config set-context $(kubectl config current-context) --namespace=default'
         sh 'kubectl apply -f GOL-Deploy.yml'
        }
        }
     }*/
}


post {
        success {
            archiveArtifacts 'gameoflife-web/target/*.war'
        }
        failure {
            mail to:"raghavendratirunagari9@gmail.com", subject:"FAILURE: ${currentBuild.fullDisplayName}", body: "Build failed"
        }
        
    }       
}

// def getDockerTag(){
 //   def tag  = sh script: 'git rev-parse HEAD', returnStdout: true
 //   return tag
// }

